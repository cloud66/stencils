apiVersion: v1
kind: Namespace
metadata:
  name: ${formation}
  annotations:
    cloud66.com/formation-uuid: ${formation["uuid"]}
    cloud66.com/stencil-uuid: ${stencil["uuid"]}
    cloud66.com/snapshot-uid: ${snapshot["uid"]}
    cloud66.com/snapshot-gitref: ${snapshot["gitref"]}
---
apiVersion: v1
kind: Secret
metadata:
  namespace: ${formation}
  name: cloud66-registry-pull-secret
  annotations:
    cloud66.com/formation-uuid: ${formation["uuid"]}
    cloud66.com/stencil-uuid: ${stencil["uuid"]}
    cloud66.com/snapshot-uid: ${snapshot["uid"]}
    cloud66.com/snapshot-gitref: ${snapshot["gitref"]}
data:
  .dockerconfigjson: ${registry_credentials()}
type: kubernetes.io/dockerconfigjson
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ${formation}
  name: ${concat(service, "-dep")}
  annotations:
    cloud66.com/formation-uuid: ${formation["uuid"]}
    cloud66.com/stencil-uuid: ${stencil["uuid"]}
    cloud66.com/snapshot-uid: ${snapshot["uid"]}
    cloud66.com/snapshot-gitref: ${snapshot["gitref"]}
spec:
  template:
    metadata:
      labels: # be careful changing labels. It can break your deployment
        app: ${stackname}
        tier: ${service}
    spec:
      containers:
        - name: ${service}
          image: ${concat(repo, "/", image(repo, "name"), ":", image(repo, "tag"))}
          ports: # Comment out this (and the line below) if don't need to expose any ports for this pod
            - containerPort: ${require("PORT")}
          command: ${require("COMMAND")}
      imagePullSecrets:
      - name: cloud66-registry-pull-secret
---
apiVersion: v1
kind: Service
metadata:
  namespace: ${formation}
  name: ${concat(service, "-svc")}
  annotations:
    cloud66.com/formation-uuid: ${formation["uuid"]}
    cloud66.com/stencil-uuid: ${stencil["uuid"]}
    cloud66.com/snapshot-uid: ${snapshot["uid"]}
    cloud66.com/snapshot-gitref: ${snapshot["gitref"]}
  labels:
    app: ${stackname}
    tier: ${service}
spec:
  type: NodePort
  ports:
  - port: ${require("EXTERNAL_PORT")}
    targetPort: ${require("INTERNAL_PORT")}
  selector:
    app: ${stackname}
    tier: ${service}
